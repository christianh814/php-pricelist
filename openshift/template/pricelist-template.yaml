apiVersion: v1
kind: Template
labels:
  createdBy: pricelist-template
metadata:
  creationTimestamp: null
  name: pricelist-template
  app: ${APPLICATION_NAME}
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      tier: frontend
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec: {}
  status:
    dockerImageRepository: ''
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      tier: frontend
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: php:5.6
          namespace: openshift
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_TRIGGER_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_TRIGGER_SECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      tier: frontend
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
      tier: frontend
      app: ${APPLICATION_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        post:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - "sleep 5 && curl -s http://${APPLICATION_NAME}:8080/create_database.php"
            containerNames: ${APPLICATION_NAME}
          failurePolicy: Ignore
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.${APPLICATION_NAME}.image.entrypoint: '["container-entrypoint","/bin/sh","-c","$STI_SCRIPTS_PATH/usage"]'
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          deploymentconfig: ${APPLICATION_NAME}
          tier: frontend
          app: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          image: ${APPLICATION_NAME}:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 2
    labels:
      tier: database
      app: ${APPLICATION_NAME}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${DATABASE_SERVICE_NAME}
      tier: database
      app: ${APPLICATION_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.${DATABASE_SERVICE_NAME}.image.entrypoint: '["container-entrypoint","run-mysqld"]'
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          deploymentconfig: ${DATABASE_SERVICE_NAME}
          tier: database
          app: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          image: registry.access.redhat.com/rhscl/mysql-56-rhel7@sha256:0a710d858de8752b70c4fbebb7c157050549a0cfc1b2e52301a20990648d02a7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${DATABASE_SERVICE_NAME}-volume-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mysql-volume-1
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:latest
          namespace: openshift
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
    creationTimestamp: null
    labels:
      tier: frontend
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}
      tier: frontend
      app: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      tier: database
      app: ${APPLICATION_NAME}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      deploymentconfig: ${DATABASE_SERVICE_NAME}
      tier: database
      app: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: 'true'
    creationTimestamp: null
    labels:
      tier: frontend
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: pricelist-example
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: GIT_URI
  required: true
  value: https://github.com/christianh814/php-pricelist
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: GIT_REF
- description: The exposed hostname that will route to the application service, if
    left blank a value will be defaulted.
  displayName: Application HostName
  name: APPLICATION_DOMAIN
- description: A secret string used to configure the GitHub webhook.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the GitHub webhook.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  value: mysql
- displayName: Database Name
  name: MYSQL_DATABASE
  value: pricelist
- displayName: Database User
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_USER
- displayName: Database Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
